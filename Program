package adsa;
import java.util.Scanner;
import java.util.Vector;

//**Router Class****************************************************************
class Routers{
    int number;
    static int[] router0Array;
    static int[] router1Array;
    int[] router2Array;
    int[] router3Array;
    
    public Routers(int number){
        this.number = number;
        
        if(this.number == 0){
            router0Array = new int[4];
        }
        
        if(this.number == 1){
            router1Array = new int[4];
        }
        
        if(this.number == 2){
            router2Array = new int[4];
        }
        
        if(this.number == 3){
            router3Array = new int[4];
        }   
    }

    public static void hashValues(int distance, int destination){
        int value = hash(destination);
        router0Array[value] = distance;
    }
    
    public static int hash(int key){
        int value = key % 10;
        return value;
    }
    
    public static void main(String[] args){
        Scanner input = new Scanner(System.in);
        int source;
        int destination;
        int weight;
        
        System.out.println("Enter number of routers in the network: ");
        int ans = input.nextInt();
        
        System.out.println("Enter number of connections in the network: ");
        int edges = input.nextInt();
        
        Network network = new Network(ans);
        
        System.out.println("Enter connections of routers in the network: ");
        
       for(int i =0; i< edges; i++){
            System.out.println("Source: ");
            source = input.nextInt();
            System.out.println("Destination: ");
            destination = input.nextInt();
            System.out.println("Weight: ");
            weight = input.nextInt();
            
            network.addLink(source, destination, weight);
        }
        
       /* network.addLink(0,1,1); 
        network.addLink(0,2,4); 
        network.addLink(0,3,7); 
        network.addLink(1,3,6); 
        network.addLink(2,3,2);*/
        
        System.out.println("\nConnections Established\n");
        
        System.out.println("Initalizing router0...");
        
       Routers router = new Routers(0); 
        network.setBoolean(); 
        network.setTotalDistance(); 
        System.out.println("From router0 send signal to which router?: ");
        destination = input.nextInt();
        
        network.minimumRoute(0,destination); //0-3
        hashValues(network.sumofTotalDistance(),destination);
        System.out.println("0 to "+destination+" Distance added");
        
        System.out.println("From 0 to "+destination+" distance travelled is: "+router0Array[hash(destination)]+"; next router signal passes through: router number "+network.nextRouter(0));
         
        network.setBoolean(); 
        network.setTotalDistance(); 
        System.out.println("\nFrom router0 send signal to which router?: ");
        destination = input.nextInt();
        
        network.minimumRoute(0,destination); //0-1
        hashValues(network.sumofTotalDistance(),destination);
        System.out.println("0 to "+destination+" Distance added");
        
        System.out.println("From 0 to "+destination+" distance travelled is: "+router0Array[hash(destination)]+"; next router signal passes through: router number "+network.nextRouter(0));
        
         
    }
    
}
//***Network********************************************************************
public class Network {
    static int totalRoutersNo;        //total number of routers - vertices
    static int[][] connections;       //connections between routers - edges
    static int[][] weights;           //distance between routers - weights
    static boolean visited[] = new boolean[4]; 
    static int[] total = new int[4];  //keeps only minimum weight edge travelled value
    
    public Network(){
        this.totalRoutersNo = 0;
        connections = new int[totalRoutersNo][totalRoutersNo];
        weights = new int[totalRoutersNo][totalRoutersNo];
    }
    
    public Network(int totalRoutersNo){
        this.totalRoutersNo = totalRoutersNo;
        connections = new int[totalRoutersNo][totalRoutersNo];
        weights = new int[totalRoutersNo][totalRoutersNo];
        
        for(int i=0; i<totalRoutersNo; i++){
            for(int j=0;j<totalRoutersNo;j++){
                connections[i][j]=0;
            }
        }
        
        for(int i=0; i<totalRoutersNo; i++){
            for(int j=0;j<totalRoutersNo;j++){
                weights[i][j]=0;
            }
        }
    }
    
    public void addLink(int source, int destination, int weight){
        connections[source][destination] = 1; 
        connections[destination][source] = 1;
        weights[source][destination] = weight;
        weights[destination][source] = weight;
    }
    
    public static void removeLink(int source, int destination){
        connections[source][destination] = 0;
        connections[destination][source] = 0;
        weights[source][destination] = 0;
        weights[destination][source] = 0;
    }
    
    public void setBoolean(){
        for(int i=0; i<totalRoutersNo; i++){
            visited[i] = false;
        }
    }
    
    public void setTotalDistance(){
        for(int i=0; i< total.length;i++){
            total[i]=0;
        }
    }
    
    public int sumofTotalDistance(){
        int sum =0;
        for(int i=0; i< total.length; i++ ){
            sum = sum + total[i];
        }
        
        return sum;
    }
    
    public static int nextRouter(int source){  //returns router name with minimum edge
        int minimum = 100;
        int next = 100;
        
        for(int i=0; i<totalRoutersNo; i++){
            if((connections[source][i]==1) && (minimum > weights[source][i])){
             minimum = weights[source][i];
             next = i;
            }
        }
        
        return next; //returns number equivalent to next router to be picked
    }
    
    public void minimumRoute(int source, int destination){
    int min =1000;
    int nextRouter = 100;
        
        for(int i=0; i<totalRoutersNo; i++){
        if((connections[source][i]==1) || (visited[i] != true)){
            if(min > weights[source][i]){
                min = weights[source][i];
                total[i] = min;
                nextRouter = i;
                visited[i] = true;
            }
        }
      }
        
    if(nextRouter != destination){
        minimumRoute(nextRouter,destination);
    }
    }
   
}




